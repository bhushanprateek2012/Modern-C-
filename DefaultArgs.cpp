#include<iostream>

/*
Notes on Inline Functions
They are defined in header file.
It is a instruction to the compiler to replace function call with function body
Inline functions are efficient as they do not require stack memory storage, neither they require
saving caller return address. 
Inline function do not generate a separate function call and execued as part of function body.
Same can be tallied on viewing assembly language code generated by the compiler.
Defining Inline functions is a request to the compiler.
Compiler may or may not make the function inline. 
Category of functions which may not be inlined are:
recursive functions, functions  invoked with pointer, large functions, functions with too many conditional
statements etc.
Modern compilers are efficient in inlining non--inline functions also.
*/
/*
MACROS disadvantages:
Works on text substitution
error prone due to substitution in nature
does not have an address whereas inline function can be invoked through address.
difficuilt to use with multiple lines of code. 
cannot be used for member functions of a class.
/*
Notes on Default Arguments
Default value of function parameters are defined in function definition
Paramenter evaluation starts with left hand side, and if value is not found in function call
it ends with default value. 
Thus, it cannot happen that, left hand parameter get evaluated with default value and right hand parameters 
get evaluated with value in function call, whereas vica versa can happen. 
*/
void CreateWindow(const char *title, int x=-1, int y=-1, int w=-1, int h=-1)
{
	using namespace std;
	cout<<"Title : "<< title<<endl;
	cout<<"x : "<<x<<endl;
	cout<<"y : "<<y<<endl;
	cout<<"width : "<<w<<endl;
	cout<<"height : "<<h<<endl;
}
inline int Square(int x)
{
	return x*x;
}
int main()
{
	//Code for Default Parameters.
	//Working Syntax
	CreateWindow("Notepad");
	CreateWindow("Notepad", 100);
	CreateWindow("Notepad", 100, 200);
	CreateWindow("Notepad", 100, 200, 300, 400);
	//Non Working Default Syntax
	/*
	CreateWindow("Notepad", ,100);
	CreateWindow("Notepad", , , 100);
	CreateWindow("Notepad", , , , );
	*/
	//Code for Inline Function
	using namespace std;
	cout<<"Square Value is: "<<Square(100)<<endl;
	
	return 0;
}


